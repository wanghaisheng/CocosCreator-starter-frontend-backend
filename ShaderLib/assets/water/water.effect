// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      properties: &props
        tilingOffset:   { value: [1, 1, 0, 0] }
        # 浅滩颜色
        shallowColor:       { value: [0.325, 0.807, 0.971, 0.725], linear: true, editor: { type: color } }
        # 深水区颜色
        deepColor:          { value: [0.086, 0.407, 1, 0.749], linear: true, editor: { type: color } }
        # 深度最大距离
        depthMaxDistance:   { value: 1, editor: { range:[0, 2, 0.01], slide: true } }
        surfaceNoise:       { value: grey }
        surfaceNoiseCutoff: { value: 0.777, editor: { range:[0, 1, 0.001], slide: true } }
        foamDistance:       { value: 0.4 }
        # 运动方向
        surfaceNoiseScroll: { value: [0.03, 0.03, 0, 0] }
        surfaceDistortion:  { value: grey }
        # 控制，以倍增的强度扭曲
        surfaceDistortionAmount: { value: 0.27, editor: { range:[0, 1, 0.01], slide: true } }
        # 泡沫颜色
        foamColor:      { value: [1, 1, 1, 1], linear: true, editor: { type: color } }
        # 透明度
        waterAlpha:     { value: 0.5, editor: { range:[0, 1, 0.1], slide: true } }
        depthTexture:   { value: grey } 
      migrations: &migs
        properties:
  - name: transparent
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      depthStencilState: &d1
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
      migrations: *migs
  - name: add
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: &r1 { cullMode: none }
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one
          blendSrcAlpha: src_alpha
          blendDstAlpha: one
      properties: *props
      migrations: *migs
  - name: alpha-blend
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: *r1
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
      migrations: *migs
}%

CCProgram unlit-vs %{
  precision highp float;
  #include <legacy/input>
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <legacy/input>
  #include <legacy/fog-vs>

  out vec2 v_uv;
  out vec3 v_position;
  out vec3 v_worldNormal;
  out vec4 v_screenPos;

  uniform TexCoords {
    vec4 tilingOffset;
  };

  vec4 vert () {
    vec4 position;
    CCVertInput(position);

    mat4 matWorld, matworldIT;
    CCGetWorldMatrixFull(matWorld, matworldIT);
  
    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;
    v_position = (matWorld * position).xyz;
    v_worldNormal = normalize((matworldIT * vec4(a_normal, 0.0)).xyz);
    v_screenPos = cc_matProj * (cc_matView * matWorld) * position;

    return v_screenPos;
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output-standard>
  #include <legacy/fog-fs>
  #include <builtin/uniforms/cc-global>
  #include <common/common-define>

  in vec2 v_uv;
  in vec3 v_position;
  in vec3 v_worldNormal;
  in vec4 v_screenPos;
  
  uniform sampler2D depthTexture;
  uniform sampler2D surfaceNoise;
  uniform sampler2D surfaceDistortion;
  uniform Constant {
    vec4 shallowColor;
    vec4 deepColor;
    vec4 surfaceNoiseScroll;
    vec4 foamColor;
    float depthMaxDistance;
    float surfaceNoiseCutoff;
    float foamDistance;
    float surfaceDistortionAmount;
    float waterAlpha;
  };

  float LinearEyeDepth (float depth) {
    float near = cc_nearFar.x;
    float far = cc_nearFar.y;
    float zc0 = (near - far) / near;
    float zc1 = far / near;
    vec4 bufferParams = vec4(zc0, zc1, zc0/far, zc1/far);
    float linearDepth = 1.0 / (bufferParams.z * depth + bufferParams.w);
    return linearDepth;
  }

  vec4 lerp(vec4 aColor, vec4 bColor, float w) {
    float r = aColor.r + w * (bColor.r - aColor.r);
    float g = aColor.g + w * (bColor.g - aColor.g);
    float b = aColor.b + w * (bColor.b - aColor.b);
    float a = aColor.a + w * (bColor.a - aColor.a);
    return vec4(r, g, b, a);
  }
  
  vec4 frag () {
    // 获取屏幕深度
    vec2 screenUV = v_screenPos.xy / v_screenPos.w * 0.5 + 0.5;
    float sceneZ = LinearEyeDepth(texture(depthTexture, screenUV).r);
    float depthDifference = clamp((sceneZ - v_screenPos.w), 0.0, 1.0);
    // 深水和潜水颜色做插值
    float waterDepthDifference01 = saturate(depthDifference / depthMaxDistance);
    vec4 waterColor = lerp(shallowColor, deepColor, waterDepthDifference01);
    // 采样噪声图
    vec2 distortSample = (texture(surfaceDistortion, v_uv).xy * 2.0 - 1.0) * surfaceDistortionAmount;
    vec2 noiseUV = vec2((v_uv.x + cc_time.x * surfaceNoiseScroll.x) + distortSample.x, (v_uv.y + cc_time.x * surfaceNoiseScroll.y) + distortSample.y);
    float surfaceNoiseSample = texture(surfaceNoise, noiseUV).r;
    float foamDepthDifference01 = saturate(depthDifference / foamDistance);
    float noiseCutoff = foamDepthDifference01 * surfaceNoiseCutoff;
    // // 噪声点
    float noise = smoothstep(noiseCutoff - 0.01, noiseCutoff + 0.01, surfaceNoiseSample);
    vec4 surfaceNoiseColor = foamColor * noise;
    // 颜色叠加 水+泡沫
    vec3 col = waterColor.rgb + surfaceNoiseColor.rgb;
    return vec4(col, saturate(waterAlpha + depthDifference));
  }
}%
