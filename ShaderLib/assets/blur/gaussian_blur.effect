// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        size: { value: [155.0, 155.0], editor: { tooltip: '节点尺寸' } }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 color;

  #if USE_TEXTURE
    uniform Constant{
        vec2 size;
    };
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif

  // vec4 gaussianBlur(vec2 uv) {
  //   vec2 offset = vec2(1.0 / size.x, 1.0 / size.y);
  //   vec4 col = vec4(0);
  //   col += CCSampleWithAlphaSeparated(cc_spriteTexture, uv + offset * vec2(-1, -1)) * 1.0;
  //   col += CCSampleWithAlphaSeparated(cc_spriteTexture, uv + offset * vec2(0, -1)) * 2.0;
  //   col += CCSampleWithAlphaSeparated(cc_spriteTexture, uv + offset * vec2(1, -1)) * 1.0;
  //   col += CCSampleWithAlphaSeparated(cc_spriteTexture, uv + offset * vec2(-1, 0)) * 2.0;
  //   col += CCSampleWithAlphaSeparated(cc_spriteTexture, uv + offset * vec2(0, 0)) * 4.0;
  //   col += CCSampleWithAlphaSeparated(cc_spriteTexture, uv + offset * vec2(1, 0)) * 2.0;
  //   col += CCSampleWithAlphaSeparated(cc_spriteTexture, uv + offset * vec2(-1, 1)) * 1.0;
  //   col += CCSampleWithAlphaSeparated(cc_spriteTexture, uv + offset * vec2(0, 1)) * 2.0;
  //   col += CCSampleWithAlphaSeparated(cc_spriteTexture, uv + offset * vec2(1, 1)) * 1.0;
  //   col = col / 16.0;
  //   return col;
  // }

  // vec4 gaussianBlur(vec2 uv) {
  //   vec4 col = vec4(0, 0, 0, 0);
  //   vec2 offset = vec2(1.0 / size.x, 1.0 / size.y);
  //   vec2 uv1 = uv + offset * vec2(1, 1);
  //   vec2 uv2 = uv + offset * vec2(-1, -1);
  //   vec2 uv3 = uv + offset * vec2(1, 1) * 2.0;
  //   vec2 uv4 = uv + offset * vec2(-1, -1) * 2.0;
  //   col += 0.4026 * CCSampleWithAlphaSeparated(cc_spriteTexture, uv); 
  //   col += 0.2442 * CCSampleWithAlphaSeparated(cc_spriteTexture, uv1);
  //   col += 0.2442 * CCSampleWithAlphaSeparated(cc_spriteTexture, uv2);
  //   col += 0.0545 * CCSampleWithAlphaSeparated(cc_spriteTexture, uv3);  
  //   col += 0.0545 * CCSampleWithAlphaSeparated(cc_spriteTexture, uv4);
  //   return col;
  // }

  vec4 gaussianBlur (vec2 uv) {
    const float radius = 6.0;
    vec4 color = vec4(0); // 初始颜色
    float sum = 0.0; // 总权重
    // 卷积过程
    for (float r = -radius; r <= radius; r++) { // 水平方向
      for (float c = -radius; c <= radius; c++) { // 垂直方向
        vec2 target = uv + vec2(r / size.x, c / size.y); // 目标像素位置
        float weight = (radius - abs(r)) * (radius - abs(c)); // 计算权重
        color += CCSampleWithAlphaSeparated(cc_spriteTexture, target) * weight; // 累加颜色
        sum += weight; // 累加权重
      }
    }
    color /= sum; // 求出平均值
    return color;
  }

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o = gaussianBlur(uv0);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    o *= color;

    ALPHA_TEST(o);
    return o;
  }
}%
